@version:3.7
@include "scl.conf"

# options
options { chain_hostnames(off); flush_lines(0); threaded(yes); create-dirs(yes); dns-cache(yes); keep-hostname(yes); suppress(3); };

# sources
source src { syslog(); internal(); };
source net { tcp(); udp(); };
source nginx_log { file("/var/log/nginx-error.log"); };

# destinations
destination authlog { file("/var/log/auth.log"); };
destination console { file("/var/log/console.log"); };
destination cron { file("/var/log/cron"); };
destination debuglog { file("/var/log/debug.log"); };
destination maillog { file("/var/log/maillog"); };
destination messages { file("/var/log/messages"); };
destination ntp { file("/var/log/ntp.log"); };
destination security { file("/var/log/security"); };

# log facility filters
filter f_auth { facility(auth); };
filter f_authpriv { facility(authpriv); };
filter f_not_authpriv { not facility(authpriv); };
filter f_cron { facility(cron); };
filter f_daemon { facility(daemon); };
filter f_kern { facility(kern); };
filter f_mail { facility(mail); };
filter f_ntp { facility(ntp); };
filter f_security { facility(security); };
filter f_user { facility(user); };

# log level filters
filter f_emerg { level(emerg); };
filter f_alert { level(alert..emerg); };
filter f_crit { level(crit..emerg); };
filter f_err { level(err..emerg); };
filter f_warning { level(warning..emerg); };
filter f_notice { level(notice..emerg); };
filter f_info { level(info..emerg); };
filter f_debug { level(debug..emerg); };
filter f_is_debug { level(debug); };

# *.notice;authpriv.none;kern.debug;lpr.info;mail.crit;news.err /var/log/messages
log { source(src); filter(f_notice); filter(f_not_authpriv); destination(messages); };
log { source(src); filter(f_kern); filter(f_debug); destination(messages); };
log { source(src); filter(f_mail); filter(f_crit); destination(messages); };

# security.*                                            /var/log/security
log { source(src); filter(f_security); destination(security); };

# auth.info;authpriv.info                               /var/log/auth.log
log { source(src); filter(f_auth); filter(f_info); destination(authlog); };
log { source(src); filter(f_authpriv); filter(f_info); destination(authlog); };

# mail.info                                             /var/log/maillog
log { source(src); filter(f_mail); filter(f_info); destination(maillog); };

# cron.*                                                /var/log/cron
log { source(src); filter(f_cron); destination(cron); };

# ntp.*                                                /var/log/ntp.log
log { source(src); filter(f_ntp); destination(ntp); };

# *.=debug                                              /var/log/debug.log
log { source(src); filter(f_is_debug); destination(debuglog); };

{% for (host,hostdetail) in pillar.get('hosts', {}).items() -%}
{% if 'roles' in hostdetail.keys() -%}
{% for (i) in hostdetail.get('roles') -%}
{% if i=='loghost' -%}
destination loghost { tcp("{{ host }}" port(514)); };
log { source(src); filter(f_warning); destination(loghost); };
log { source(nginx_log); destination(loghost); };
{% endif -%}
{% if i=='loghost' and host==grains['host'] %}
destination fluentd { network("127.0.0.1" port(5140) transport("udp")); };
log { source(net); destination(fluentd); };
{% endif -%}
{% endfor -%}
{% endif -%}
{% endfor -%}
