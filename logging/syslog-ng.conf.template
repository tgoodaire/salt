@version:3.7
@include "scl.conf"

#
# options
#

options { chain_hostnames(off); flush_lines(0); threaded(yes); create-dirs(yes); dns-cache(yes); keep-hostname(yes); };

#
# sources
#

{% for (host,hostdetail) in pillar.get('hosts', {}).items() -%}
{% if 'roles' in hostdetail.keys() -%}
{% for (i) in hostdetail.get('roles') -%}
{% if i=='loghost' -%}
source src { udp(); system(); internal(); };
{% endif -%}
{% if i=='loghost' and host==grains['host'] %}
source src { udp(); network(); system(); internal(); };
{% endif -%}
{% endfor -%}
{% endif -%}
{% endfor -%}

#
# destinations
#
destination all { file("/var/log/all.log"); };
destination authlog { file("/var/log/auth.log"); };
destination console { file("/var/log/console.log"); };
destination cron { file("/var/log/cron"); };
destination debuglog { file("/var/log/debug.log"); };
destination maillog { file("/var/log/maillog"); };
destination messages { file("/var/log/messages"); };
destination security { file("/var/log/security"); };

#
# log facility filters
#
filter f_auth { facility(auth); };
filter f_authpriv { facility(authpriv); };
filter f_not_authpriv { not facility(authpriv); };
filter f_cron { facility(cron); };
filter f_daemon { facility(daemon); };
filter f_ftp { facility(ftp); };
filter f_kern { facility(kern); };
filter f_mail { facility(mail); };
filter f_security { facility(security); };
filter f_user { facility(user); };
filter f_uucp { facility(uucp); };
filter f_local0 { facility(local0); };
filter f_local1 { facility(local1); };
filter f_local2 { facility(local2); };
filter f_local3 { facility(local3); };
filter f_local4 { facility(local4); };
filter f_local5 { facility(local5); };
filter f_local6 { facility(local6); };
filter f_local7 { facility(local7); };

#
# log level filters
#
filter f_emerg { level(emerg); };
filter f_alert { level(alert..emerg); };
filter f_crit { level(crit..emerg); };
filter f_err { level(err..emerg); };
filter f_warning { level(warning..emerg); };
filter f_notice { level(notice..emerg); };
filter f_info { level(info..emerg); };
filter f_debug { level(debug..emerg); };
filter f_is_debug { level(debug); };

#
# *.notice;authpriv.none;kern.debug;lpr.info;mail.crit;news.err /var/log/messages
#
log { source(src); filter(f_notice); filter(f_not_authpriv); destination(messages); };
log { source(src); filter(f_kern); filter(f_debug); destination(messages); };
log { source(src); filter(f_mail); filter(f_crit); destination(messages); };

#
# security.*                                            /var/log/security
#
log { source(src); filter(f_security); destination(security); };

#
# auth.info;authpriv.info                               /var/log/auth.log
log { source(src); filter(f_auth); filter(f_info); destination(authlog); };
log { source(src); filter(f_authpriv); filter(f_info); destination(authlog); };

#
# mail.info                                             /var/log/maillog
#
log { source(src); filter(f_mail); filter(f_info); destination(maillog); };

#
# cron.*                                                /var/log/cron
#
log { source(src); filter(f_cron); destination(cron); };

#
# *.=debug                                              /var/log/debug.log
#
log { source(src); filter(f_is_debug); destination(debuglog); };

#
# *.emerg                                               *
#

#
# uncomment this to enable logging of all log messages to /var/log/all.log
# touch /var/log/all.log and chmod it to mode 600 before it will work
# *.*                                                   /var/log/all.log
#
log { source(src); filter(f_warning); destination(all); };

{% for (host,hostdetail) in pillar.get('hosts', {}).items() -%}
{% if 'roles' in hostdetail.keys() -%}
{% for (i) in hostdetail.get('roles') -%}
{% if i=='loghost' -%}
destination loghost { udp("{{ host }}" port(514)); };
log { source(src); filter(f_warning); destination(loghost); };
{% endif -%}
{% if i=='loghost' and host==grains['host'] %}
destination fluentd { network("127.0.0.1" port(5140) transport("udp")); };
log { source(src); filter(f_warning); destination(fluentd); };
{% endif -%}
{% endfor -%}
{% endif -%}
{% endfor -%}
